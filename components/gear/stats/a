    private rarity : number = 4;
    private enhancements : number = 0;
    private selectedStats : number[] = [];
    private subStatDisplay : GearSub[];

    private displayingSelections : boolean = false;
    
    constructor(props) {
        super(props);
        this.selectedStats = [5, 2, 3, 4];
        this.subStatDisplay = subStats(this.selectedStats);
    }

    getStats() : statObject[] {
        let stats : statObject[] = [];
        for (let i = 0 ; i < this.selectedStats.length; i++) {
            stats.push(subArray[this.selectedStats[i]])
        }
        return stats;
    }

    getValues() : number[] {
        let values : number[] = [];
        for (let i = 0 ; i < this.subStatDisplay.length; i++) {
            values.push(this.subStatDisplay[i].returnValue())
        }
        return values;
    }

    getEnhancement() : number {
        return this.enhancements;
    }





    /**
     * Creates the selection div
     * Creates a button for each substat in the subArray array
     * Stores in a grid for display
     */
   createSelect() {
    let selectStat = [];
    let maxPerColumn = 5;
    let currentColumn = 1;
    let currentRow = 1;
    for (let i = 0; i < subArray.length; i++) {
        let status : string = "blue";
        if (this.selectedStats.includes(i)) {
            status = "pink";
        }

        selectStat.push(
            <Box key={i} sx={{
                gridColumn: currentColumn,
                gridRow: currentRow,
                paddingX: '10px',
                paddingY: '5px',
                margin: '2px',
                textAlign: 'center',
                background: status,
                borderRadius: '2px',
                ':hover': {
                    cursor: "pointer",
                },
            }} id={"subContainer-selection-" + i} onClick={() => this.handleStat("subContainer-selection-" + i, i)}>
                {subArray[i].name}
            </Box>
        )
        currentColumn++;
        if (currentColumn > maxPerColumn) {
            currentColumn = 1;
            currentRow++;
        }
    }

    return selectStat;
    }

    /**
     * Set the number of enhancements
     * @param newEnhance New number of enhancements
     */
    updateEnhance(newEnhance : number) {
        this.enhancements = newEnhance/3;
    }